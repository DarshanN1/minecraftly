buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

group = 'com.minecraftly'

ext.exhaustVersion = '2.0.0-SNAPSHOT'
ext.pmfVersion = '1.0.0-SNAPSHOT'

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'com.github.johnrengelman.shadow'

    version = '1.0-SNAPSHOT'
    ext.cleanName = getName()

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    defaultTasks 'clean', 'build', 'test'

    jar {
        classifier = 'original'
    }

    shadowJar {
        classifier = ''
    }

    build.dependsOn(shadowJar)

    repositories {
        mavenLocal() // PluginMessageFramework
        mavenCentral()

        maven {
            url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }

        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }

        maven { // Intake
            url 'http://maven.sk89q.com/artifactory/libs-snapshot-local'
        }

        maven { // Exhaust
            url 'http://repo.ellune.net/content/groups/public/'
        }
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
    }

    test {
        testLogging.showStandardStreams = true

        minHeapSize = '128m'
        maxHeapSize = '512m'

        beforeTest { descriptor ->
            logger.lifecycle('Running test: ' + descriptor)
        }

        testLogging {
            exceptionFormat = 'full'
        }
    }
}

subprojects {
    afterEvaluate { project-> // this needs done after projects have been initialized
        def cleanName = project.ext.cleanName
        archivesBaseName = cleanName

        processResources {
            filter ReplaceTokens, tokens: [
                    'project.group'  : project.getGroup(),
                    'project.name'   : project.getName(),
                    'project.version': project.getVersion(),
                    'project.cleanName': cleanName
            ]
        }
    }
}